openapi: 3.0.3
info:
  title: M2M Gateway API
  description: The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework
  termsOfService: https://uxly.software/terms/
  contact:
    name: API Support
    url: https://uxly.software/support
    email: support@uxly.software
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "0.1"
servers:
  - url: https://api.1shotapi.dev/v0
    description: Development server
  - url: https://api.1shotapi.com/v0
    description: Production server

paths:
  /token:
    post:
      tags: 
        - Authentication
        - OAuth2
      summary: Obtain an OAuth2 access token
      description: |
        This endpoint implements the OAuth2 Client Credentials Flow. Clients must send their `client_id` and `client_secret` in the request body to receive an access token.
      operationId: getAccessToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [client_credentials]
                  description: Must be `client_credentials`
                client_id:
                  type: string
                  description: A valid API Key value from a defined API Credential
                client_secret:
                  type: string
                  description: A valid Secret value from a defined API Credential
      responses:
        200:
          description: Successfully issued an access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth2 access token
                  token_type:
                    type: string
                    enum: [Bearer]
                    description: Token type (always `Bearer`)
                  expires_in:
                    type: integer
                    description: Expiration time in seconds (usually 3600)
                  scope:
                    type: string
                    description: Granted scopes
        400:
          description: Invalid request (e.g., missing parameters)
        401:
          description: Invalid client credentials
        403:
          $ref: "#/components/responses/PermissionError"
  
  /methods/{contractMethodId}/test:  
    post:
      tags:
        - Contract Methods
      description: This method simulates the execution of a contract method. No gas will be spent and nothing on chain will change, but it will let you know whether or not an execution would succeed. Internally, this method relies on staticCall.
      parameters:
        - name: contractMethodId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the Contract Method via the name of the parameter
              properties:
                params:
                  $ref: '#/components/schemas/JSONValue'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractMethodTestResult'
        500:
          $ref: "#/components/responses/DatabaseError"

  /methods/{contractMethodId}/estimate:  
    post:
      tags:
        - Contract Methods
        - Contract Methods
      description: Estimates the cost of executing the Contract Method with the given parameters. Returns data about the fees and amount of gas.
      parameters:
        - name: contractMethodId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the Contract Method via the name of the parameter
              properties:
                params:
                  $ref: '#/components/schemas/JSONValue'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractMethodEstimate"
        500:
          $ref: "#/components/responses/DatabaseError"
   
  /methods/{contractMethodId}/execute:  
    post:
      tags:
        - Contract Methods
      description: Starts the execution of the Contract Method, and returns a Transaction. You can only execute Contract Methods that are payable or nonpayable. Use /read for view and pure Contract Methods.
      parameters:
        - name: contractMethodId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the Contract Method via the name of the parameter
              properties:
                params:
                  $ref: '#/components/schemas/JSONValue'
                walletId:
                  $ref: "#/components/schemas/WalletId"
                memo:
                  type: string
                  description: You may include any text you like when you execute a Contract Method, as a note to yourself about why it was done. This text can be JSON or similar if you want to store formatted data.
                authorizationList:
                  type: array
                  items:
                    $ref: "#/components/schemas/ERC7702Authorization"
                  description: A list of authorizations for the Contract Method. If you are using ERC-7702, you must provide at least one authorization.
                  example: [{"address": "0x1234567890abcdef", "nonce": "1", "chainId": "1", "signature": "0x1234567890abcdef"}]
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        500:
          $ref: "#/components/responses/DatabaseError"

  /methods/{contractMethodId}/read:  
    post:
      tags:
        - Contract Methods
      description: Gets the result of a view or pure function; this will error on payable and nonpayable Contract Methods.
      parameters:
        - name: contractMethodId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the Contract Method via the name of the parameter
              properties:
                params:
                  $ref: '#/components/schemas/JSONValue'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONValue'
        500:
          $ref: "#/components/responses/DatabaseError"
  
  /business/{businessId}/methods:
    post:
      tags:
        - Contract Methods
        - Create
      description: Create a new Contract Method. A Contract Method is sometimes referred to as an Endpoint. A Contract Method corresponds to a single method on a smart contract, and most of the required information to create one can be pulled from an Ethereum EBI. Contract Methods can be configured with static values for input parameters, which is useful for controlling how the Contract Method is called. For instance, you may set the "amount" parameter to a constant value on a "mint" call so that you always mint the same amount of tokens and can't cheat. You can have multiple Contract Methods for the same underlying method on a smart contract, if you want to configure them with different static parameters.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  $ref: "#/components/schemas/EChain"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                walletId:
                  $ref: "#/components/schemas/WalletId"
                name:
                  type: string
                  description: This is the name of the Contract Method, which is used for display purposes and lookup- it is not the same as the functionName, but can be.
                  example: Mint Token
                description:
                  type: string
                  description: A description of the Contract Method. You should include details about what the Contract Method does and when it should be called. If you are using static parameters, describe the configured values.
                  example: This calls the mint() method on our ERC20 contract
                functionName:
                  type: string
                  description: The actual method name on the smart contract. Solidity names are case sensitive and must match precisely.
                  example: mint
                stateMutability:
                  $ref: "#/components/schemas/ESolidityStateMutability"
                inputs:
                  type: array
                  description: An array of the input parameters for the smart contract method. These may be configured with static values.
                  items:
                    $ref: "#/components/schemas/NewSolidityStructParam"
                outputs:
                  type: array
                  description: An array of the output parameters for the smart contract method. Static values can be configured but will be ignored. Output parameters for "payable" and "nonpayable" methods are generally ignored and do not need to be defined, but these are required for "pure" and "view" methods.
                  items:
                    $ref: "#/components/schemas/NewSolidityStructParam"
                callbackUrl:
                  type: string
                  description: The URL that will be notified after the Contract Method is executed. This must be a valid HTTP or HTTPS URL and include the protocol.
                  nullable: true
                  example: https://example.com/webhook
              required:
                - chainId
                - contractAddress
                - walletId
                - name
                - description
                - functionName
                - stateMutability
                - inputs
      responses:
        200:
          description: Returns the created Contract Method.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractMethod"
                  

        500:
          $ref: "#/components/responses/DatabaseError"

    get:
      tags:
        - Contract Methods
        - List
      description: Lists Contract Methods for a business
      parameters:
        - name: businessId
          in: path
          description: The business that you want Contract Methods from
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: chainId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/EChain"
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: "Best Contract Method Ever"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/EDeletedStatusSelector"
        - name: contractAddress
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: promptId
          in: query
          required: false
          description: The ID of the Prompt you want to filter by. If provided, only Contract Methods created from this Prompt will be returned.
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: methodType
          in: query
          required: false
          description: Which type of Contract Method you want to filter by- read or write methods. If not provided, all Contract Methods will be returned.
          schema:
            type: string
            enum:
              - read
              - write
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a list of Contract Method objects.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContractMethod"
                  - $ref: "#/components/schemas/PagedResponse"

        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/methods/abi:
    post:
      tags:
        - Contract Methods
        - Create
      description: Imports a complete ethereum ABI and creates Contract Methods for each "function" type entry. Every Contract Method will be associated with the same Wallet
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  $ref: "#/components/schemas/EChain"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                walletId:
                  $ref: "#/components/schemas/WalletId"
                abi:
                  $ref: "#/components/schemas/EthereumAbi"
                name:
                  type: string
                  description: The name of the smart contract, if it doesn't already exist.
                  example: Uniswap V3
                description:
                  type: string
                  description: A description of the smart contract, if it doesn't already exist.
                  example: The Uniswap V3 smart contract
                tags:
                  type: array
                  items:
                    type: string
                  description: Tags to add to the smart contract
              required:
                - chainId
                - contractAddress
                - walletId
                - abi
      responses:
        200:
          description: Returns the created Contract Method objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractMethod"

        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/methods/prompt:
    post:
      tags:
        - Contract Methods
        - Assure
      description: Assures that Contract Methods exist for a given Prompt. This is based on the verified contract ABI and either the highest-ranked Prompt or the promptId provided. If Contract Methods already exist, they are not modified. If they do not exist, any methods that are in the Prompt will be created with the details from the Prompt. We return every Contract Method for methods defined in the Prompt.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  $ref: "#/components/schemas/EChain"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                walletId:
                  $ref: "#/components/schemas/WalletId"
                promptId:
                  type: string
                  format: uuid
                  description: The ID of the prompt that you want to use. If not provided, the highest-ranked Prompt for the chain and contract address will be used. This is optional, and a Contract Method can drift from the original Prompt but retain this association.
                  example: 100d2e83-dddd-480d-88ad-74a71c214912
              required:
                - chainId
                - contractAddress
                - walletId
      responses:
        200:
          description: Returns all the Contract Methods defined by the Prompt. It is possible for the descriptions of these Contract Methods to drift from the original Prompt. In the case that multiple Contract Methods exist for the same Prompt, the most recently created one will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractMethod"

        500:
          $ref: "#/components/responses/DatabaseError"

  /methods/{contractMethodId}:
    get:
      tags:
        - Contract Methods
        - Get
      description: Gets a single Contract Method via its ContractMethodId
      parameters:
        - name: contractMethodId
          in: path
          description: The Contract Method that you want to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a single Contract Method object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractMethod"

        500:
          $ref: "#/components/responses/DatabaseError"

    put:
      tags:
       - Contract Methods
       - Update
      description: Updates a Contract Method. You can update most of the properties of a Contract Method via this method, but you can't change the inputs or outputs. Use the Struct API calls for that instead.
      parameters:
        - name: contractMethodId
          in: path
          description: The Contract Method that you want to update
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the Contract Method via the name of the parameter
              properties:
                chainId:
                  $ref: "#/components/schemas/EChain"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                walletId:
                  $ref: "#/components/schemas/WalletId"
                name:
                  type: string
                  description: The name of the Contract Method, used for organization purposes.
                description:
                  type: string
                  description: An optional description of the Contract Method, for your own reference in the site.
                functionName:
                  type: string
                  description: The name of the function on the contract. This is case-sensitive, so be sure to check your ABI.
                payable:
                  type: boolean
                  description: Some Contract Methods can move tokens with them. Check your ABI.
                nativeTransaction:
                  type: boolean
                  description: It is possible to create a "native" Contract Method, one that is part of the EVM and not a smart contract. Set this to true to enable native Contract Method handling.
                callbackUrl:
                  type: string
                  format: URL
                  example: "https://my-server.com/1shotwebhook"
                  description: The desired URL for the callback. This will internally create a Webhook Trigger. Make sure to leave this undefined to not update the field, if you pass null it will clear the webhook.
                  nullable: true
      responses:
        200:
          description: Returns the updated Contract Method object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractMethod"

        500:
          $ref: "#/components/responses/DatabaseError"

    delete:
      tags:
        - Contract Methods
        - Delete
      description: Deletes a Contract Method
      parameters:
        - name: contractMethodId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ContractMethodId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"

        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/transactions:
    get:
      tags:
        - Transactions
        - List
      description: Gets a paged list of Transactions, which are records of changes made to the blockchain from executing a Contract Method. You can see the status of the Transaction and your history.
      parameters:
        - name: businessId
          in: path
          description: The business that you want Transactions from
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: chainId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/EChain"
        - name: status
          in: query
          required: false
          schema:
            type: string
            description: The status of the Transaction as it moves through 1Shot.
            enum:
              - Pending
              - Submitted
              - Completed
              - Retrying
              - Failed
        - name: walletId
          in: query
          required: false
          description: Will filter the results to Transactions using this Wallet Id only.
          schema:
            $ref: "#/components/schemas/WalletId"
        - name: contractMethodId
          in: query
          required: false
          description: Will filter the results to only those Transactions for this particular Contract Method.
          schema:
            $ref: "#/components/schemas/ContractMethodId"
        - name: apiCredentialId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: userId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a paged response of Transaction objects.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/Transaction"
                  - $ref: "#/components/schemas/PagedResponse"

        500:
          $ref: "#/components/responses/DatabaseError"

  /transactions/{transactionId}:
    get:
      tags:
        - Transactions
        - Get
      description: Gets a specific Transaction
      parameters:
        - name: transactionId
          in: path
          description: The Transaction that you want to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/TransactionId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns the specific requested Transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/wallets:
    get:
      tags:
        - Wallets
        - List
      description: Lists wallets for the business- NOT BusinessWallets. These are almost identical but Wallet has more stuff.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
        - name: chainId
          in: query
          description: The specific chain to get the wallets for
          required: false
          schema:
            $ref: "#/components/schemas/EChain"
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: name
          in: query
          required: false
          description: Filters on the name of the wallet.
          schema:
            type: string
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/Wallet"
                  - $ref: "#/components/schemas/PagedResponse"
        403:
          $ref: "#/components/responses/PermissionError"
    post:
      tags:
        - Wallets
        - Create
      description: Creates a new Wallet. Wallets are owned by a single Business and are linked a single Chain.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            $ref: "#/components/schemas/BusinessId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  $ref: "#/components/schemas/EChain"
                name:
                  type: string
                  description: The name of the wallet.
                description:
                  type: string
                  description: A description of the wallet, such as it's intended use. This is for reference only.
              required:
                - chainId
                - name
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns the wallet object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"

        500:
          $ref: "#/components/responses/DatabaseError"
          
  /wallets/{walletId}:
    get:
      tags:
        - Wallets
        - Get
      description: Gets n Wallet by the ID. Doesn't matter what chain it's on.
      parameters:
        - name: walletId
          in: path
          description: The ID of the wallet
          required: true
          schema:
            $ref: "#/components/schemas/WalletId"
        - name: includeBalances
          in: query
          description: Set to "true" to return the balance information for the wallet. Includes only the native token balance.
          required: false
          schema:
            type: boolean
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
        403:
          $ref: "#/components/responses/PermissionError"
    delete:
      tags:
        - Wallets
        - Delete
      description: Deletes a Wallet with the provided ID. The API Credential must have Admin level permissions on the Business that owns this Wallet, and the Wallet must be near empty.
      parameters:
        - name: walletId
          in: path
          description: The ID of the wallet
          required: true
          schema:
            $ref: "#/components/schemas/WalletId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether or not the delete was successful
                    example: true
        403:
          $ref: "#/components/responses/PermissionError"
    put:
      tags:
        - Wallets
        - Update
      description: Updates a Wallet. Will only update properties that are not null
      parameters:
        - name: walletId
          in: path
          description: The ID of the wallet
          required: true
          schema:
            $ref: "#/components/schemas/WalletId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
        403:
          $ref: "#/components/responses/PermissionError"
  
  /structs/{structId}:
    put:
      tags:
        - Solidity Structs
        - Update
      description: Updates an existing solidity struct. You can get the structId from the SolidityStructParam.typeStructId, which are either input or output params of a Contract Method.
      parameters:
        - name: structId
          in: path
          description: The ID of the existing Solidity Struct
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              description: You must provide at least one value to update
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: The updated Solidity Struct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolidityStruct"
        403:
          $ref: "#/components/responses/PermissionError"
        500:
          $ref: "#/components/responses/DatabaseError"
      
  /structs/{structId}/params:
    post:
      tags:
        - Solidity Structs
        - Create
      description: Adds a param to an existing struct. Because of the way the indexes work, you can only add params to the end of a struct. You can use /structs/{structId}/params to later rearrange all the indexes of the params if required.
      parameters:
        - name: structId
          in: path
          description: The ID of the existing Solidity Struct
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSolidityStructParam"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: The updated Solidity Struct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolidityStruct"
        403:
          $ref: "#/components/responses/PermissionError"
        500:
          $ref: "#/components/responses/DatabaseError"
  
    put:
      tags:
        - Solidity Structs
        - Update
      description: Update the params of an existing struct. Normally, you would do updates one at a time, but since the parameter indexes must be kept in order, you can update multiple params at once with this call.
      parameters:
        - name: structId
          in: path
          description: The ID of the existing Solidity Struct
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updates:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/SolidityStructParamUpdate"
                      - type: object
                        properties:
                          id: 
                            type: string
                            format: uuid
                            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
                        required:
                          - id
              description: You must provide at least one update object
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: The updated Solidity Struct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolidityStruct"
        403:
          $ref: "#/components/responses/PermissionError"
        500:
          $ref: "#/components/responses/DatabaseError"

  /structs/{structId}/params/{structParamId}:
    delete:
      tags:
        - Solidity Structs
        - Delete
      description: Removes a param from an existing solidity struct. Because the indexes must be kept valid at all times, you can only practically remove the last param from the struct. If you need to remove a param in the middle, call PUT /structs/{structId}/params and rearrange the param indexes first. 
      parameters:
        - name: structId
          in: path
          description: The ID of the existing Solidity Struct
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: structParamId
          in: path
          description: The ID of the existing Solidity Struct param that you want to remove.
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: The updated Solidity Struct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolidityStruct"
        403:
          $ref: "#/components/responses/PermissionError"
        500:
          $ref: "#/components/responses/DatabaseError"

  /prompts/search:
    post:
      tags:
        - Search
        - Prompts
      description: Performs a semantic search on prompts to find the most relevant contracts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: A free-form query to search for contracts. This uses semantic search to find the most relevant contracts.
                chainId:
                  $ref: "#/components/schemas/EChain"
              required:
                - query
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a paged response of prompts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FullPrompt"
        500:
          $ref: "#/components/responses/DatabaseError"

components:
  securitySchemes:
    OAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.1shotapi.com/token
          scopes:
            read:api: Read access to the API
            write:api: Write access to the API

  responses:
    InvalidError:
      description: Data is invalid
    PermissionError:
      description: The authentication token does not have permission to access this endpoint
    DatabaseError:
      description: Database has encountered an error

  schemas:
    PageSize:
      description: The size of the page to return. Defaults to 25
      type: integer
      example: 25

    Page:
      description: Which page to return. This is 1 indexed, and default to the first page, 1
      type: integer
      example: 1

    TotalResults:
      description: The total number of results returned by a paged response
      type: integer
      example: 1

    PagedResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        totalResults:
          $ref: "#/components/schemas/TotalResults"
      required:
        - page
        - pageSize
        - totalResults

    EntityBookKeepingWithoutDeleted:
      type: object
      properties:
        updated:
          type: number
          format: unix-timestamp
          example: 1659485172
        created:
          type: number
          format: unix-timestamp
          example: 1659485172
      required:
        - updated
        - created

    EntityBookKeeping:
      allOf:
        - type: object
          properties:
            deleted:
              type: boolean
              example: false
          required:
            - deleted
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
    
    ETransactionStatus:
      type: string
      enum:
        - Pending
        - Submitted
        - Completed
        - Retrying
        - Failed
    
    ESolidityAbiParameterType:
      type: string
      enum:
        - address
        - bool
        - bytes
        - int
        - string
        - uint
        - struct

    ESolidityStateMutability:
      type: string
      enum:
        - nonpayable
        - payable
        - view
        - pure
        
    EDeletedStatusSelector:
      type: string
      enum:
        - live
        - archived
        - both
    
    EWebhookStatus:
      type: string
      description: The current status of the webhook
      enum:
        - Unsent
        - Success
        - Retrying
        - Failed

    EEventName:
      type: string
      enum:
        - TransactionFailure
        - TransactionSuccess
        
    EChain:
      type: integer
      description: The ChainId of a supported chain on 1Shot API
      enum:
        - 1
        - 11155111
        - 42
        - 137
        - 43114
        - 43113
        - 80002
        - 100
        - 56
        - 1284
        - 42161
        - 10
        - 592
        - 81
        - 97
        - 324
        - 8453
        - 84532
        - 88888
        - 11297108109
        - 42220
        - 130
        - 480
        - 81457

    EChainTechnology:
      type: integer
      description: The technology of the chain. 1Shot currently only supports EVM (0) chains
      enum:
        - 0

    ContractAddress:
      type: string
      description: string address of contract
      example: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
      
    WalletAddress:
      type: string
      description: string address of a wallet insight platform holds keys for
      example: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
      
    Wallet:
      description: A Wallet is a custodial "hot" wallet controlled by 1Shot. It is a normal Externally Owned Account, and can be used like any normal wallet. 1Shot executes Contract Methods via a Wallet, which must at least hold some gas token for the chain. Wallets are linked to a particular chain for safety and ease of use; technically an EOA address can be used on any EVM chain but the potential for confusion is greater than the utility provided. You may define as many Wallets as you need. Each Contract Method is configured with a default Wallet but this can be overridden. The Contract Method will be submitted via that Wallet and paid for from that Wallet. Wallets owned by a Business are the only ones used by 1Shot, but wallets owned by an individual User may be supported in the future.
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/WalletId"
            accountAddress:
              $ref: "#/components/schemas/WalletAddress"
            businessId:
              allOf:
                - $ref: "#/components/schemas/BusinessId"
                - type: string
                  nullable: true
                  description: The business ID that owns this wallet. Admin wallets will not have this value. A Wallet will have either a user ID or a business ID.
            userId:
              type: string
              format: uuid
              nullable: true
              description: The User ID of the person that owns this Wallet. Admin wallets will not have this value. A wallet will have either a user ID or a business ID.
            chainId:
              $ref: "#/components/schemas/EChain"
            name:
              type: string
              description: The name of the wallet.
            description:
              type: string
              description: A description of the wallet, can be used to describe its purpose.
            isAdmin:
              type: boolean
              description: Whether or not the wallet is an admin wallet, used for internal purposes.
            accountBalanceDetails:
              allOf:
                - $ref: "#/components/schemas/AccountBalanceDetails"
                - type: object
                  nullable: true
          required:
            - id
            - accountAddress
            - businessId
            - userId
            - chainId
            - name
            - description
            - isAdmin
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
        
    AccountBalanceDetails:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/EChainTechnology"
        ticker:
          type: string
          example: ETH
        chainId:
          $ref: "#/components/schemas/EChain"
        tokenAddress:
          $ref: "#/components/schemas/ContractAddress"
        accountAddress:
          $ref: "#/components/schemas/WalletAddress"
        balance:
          type: string
          format: big-number-string
          description: The balance of the token as a Big Number String
          example: 123400000000000000000
        decimals:
          type: integer
          description: The number of decimals in the balance. Determined by the token type.
      required:
        - type
        - ticker
        - chainId
        - tokenAddress
        - accountAddress
        - balance
        - decimals
      
    ContractMethod:
      description: A single defined method on a smart contract on a chain. You can have multiple Contract Methods defined for the same method in the smart contract if you want to use different setups for static parameters, or if you create them from different Prompts. Contract Methods are sometimes referred to as Endpoints.
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/ContractMethodId"
            businessId:
              $ref: "#/components/schemas/BusinessId"
            chainId:
              $ref: "#/components/schemas/EChain"
            contractAddress:
              $ref: "#/components/schemas/ContractAddress"
            walletId:
              allOf:
                - $ref: "#/components/schemas/WalletId"
                - type: string
                  description: The default Wallet that will execute this Contract Method
            name:
              type: string
              description: Name of the Contract Method. This is not necessarily the name of the underlying method (generally something simple like "mint"); this is used only in 1Shot to help you distinguish your Contract Methods. Given the Contract Method a good name will help when you have created multiple Contract Methods from different Prompts, in particular. The same "mint" function may be named "Mint 10000 tokens at a time" and "After creating the token contract", based on the intended use case.
              example: Got good
            description:
              type: string
              description: Description of the Contract Method. This should be written for AI agents to take advantage of. This will come from the original Prompt if you create the Contract Method from a Prompt.
              example: Contract Method for getting good
            functionName:
              type: string
              description: Name of the function on the contract to call for this Contract Method. 
              example: mint
            inputs:
              type: array
              items: 
                $ref: "#/components/schemas/SolidityStructParam"
            outputs:
              type: array
              items: 
                $ref: "#/components/schemas/SolidityStructParam"
            stateMutability: 
              $ref: "#/components/schemas/ESolidityStateMutability"
            promptId:
              type: string
              format: uuid
              nullable: true
              description: The ID of the Prompt that this Contract Method was created from. This is optional, and a Contract Method can drift from the original Prompt but retain this association.
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            callbackUrl:
              type: string
              nullable: true
              description: The current destination for webhooks to be sent when this Contract Method is executed. Will be null if no webhook is assigned.
              example: "https://example.com/webhook"
            publicKey:
              type: string
              format: base64
              nullable: true
              description: The current public key for verifying the integrity of the webhook when this Contract Method is executed. 1Shot will sign its webhooks with a private key and provide a signature for the webhook that can be validated with this key. It will be null if there is no webhook destination specified.
          required:
            - id
            - businessId
            - chainId
            - contractAddress
            - walletId
            - name
            - description
            - functionName
            - inputs
            - outputs
            - stateMutability
            - promptId
            - callbackUrl
            - publicKey
        - $ref: "#/components/schemas/EntityBookKeeping"
       
    NewSolidityStruct:
      description: The values required to create a completely new Solidity Struct.
      type: object
      properties: 
        name: 
          type: string
          description: The name of the struct. Structs are used to define the parameters of a Contract Method, but these structs don't have names.
        params:
          type: array
          items:
            $ref: "#/components/schemas/NewSolidityStructParam"
      required:
        - businessId
        - params
            
    SolidityStruct:
      description: A struct object as defined in solidity ABI
      allOf:
        - type: object
          properties: 
            id:
              type: string
              format: uuid
              description: Internal ID of the struct.
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            businessId:
              $ref: "#/components/schemas/BusinessId"
          required:
            - id
            - businessId
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
        - allOf:
          - $ref: "#/components/schemas/NewSolidityStruct"
          - type: object
            properties:
              params:
                type: array
                items:
                  $ref: "#/components/schemas/SolidityStructParam"
        
        
    SolidityStructParamUpdate:
      type: object
      description: These are the properties that may be updated on a Solidity Struct Param.
      properties:
        name:
          type: string
          example: amount
        description:
          type: string
          example: Description of the parameter
        type:
          $ref: "#/components/schemas/ESolidityAbiParameterType"
        index:
          type: integer
          example: 0
          description: This is the relative index in the contract function. It should start at 0, and must not skip any numbers.
        staticValue:
          type: string
          description: This is an optional, static value for the parameter. If you set this, you will never be required or able to pass a value for this parameter when you execute the Contract Method, it will use the set staticValue. This is useful for creating dedicated endpoints with specific functionalities, particularly when tied to API Credentials that can only execute specific Contract Methods. For example, you can have a 'transfer' Contract Method that is hardcoded to a specific amount, or to a specific receiver address.
        typeSize:
          type: number
          description: "This is an optional field that specifies the main size of the Solidity type. For example, if your type is uint, by default it is a uint256. If you want a uint8 instead, set this value to 8. It works for int, uint, fixed, ufixed, and bytes types. Valid values for bytes are 1 to 32, for others it is 256 % 8"
        typeSize2:
          type: integer
          description: This is identical to typeSize but only used for fixed and ufixed sizes. This is the second size of the fixed field, for example, fixed(typeSize)x(typeSize2).
        isArray:
          type: boolean
          description: If this parameter is an array type set this to true. By default, arrays can be of any size so you don't need to set arraySize.
        arraySize:
          type: integer
          description: If the parameter is a fixed size array, set this value.
        typeStructId:
          type: string
          description: The ID of the sub-struct if the type is "struct". When creating a param, you must set only one of either typeStructId (to re-use an existing Solidity Struct) or typeStruct (creates a new struct for the param)
        typeStruct:
          allOf:
            - $ref: "#/components/schemas/NewSolidityStruct"
            - type: object
              description: The sub-struct if the type is "struct", which will be created for use by this parameter. When creating a param, you must set only one of either typeStructId (to re-use an existing Solidity Struct) or typeStruct (creates a new struct for the param)

    NewSolidityStructParam:
      allOf:
        - $ref: "#/components/schemas/SolidityStructParamUpdate"
        - type: object
          description: These are the required values when creating a new Solidity Struct Parameter.
          required:
            - name
            - type
            - index

    SolidityStructParam:
      description: A single defined parameter for a Solidity Struct after it has been created. Contract Methods create an anonymous Solidiy Struct for the inputs and outputs, so a SolidityStructParam can be thought of as a parameter for a Contract Method. It corresponds to an item in an ABI.
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Internal ID of the parameter.
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            structId:
              type: string
              format: uuid
              description: Internal ID struct that owns this parameter.
              example: 100d2e83-dddd-480d-88ad-74a71c214912
          required:
            - id
            - structId
        - allOf:
          - $ref: "#/components/schemas/NewSolidityStructParam"
          - type: object
            properties:
              typeStruct:
                allOf:
                  - $ref: "#/components/schemas/SolidityStruct"
                  - type: object
                    description: The sub-struct if the type is "struct", which will be created for use by this parameter. When creating a param, you must set only one of either typeStructId (to re-use an existing Solidity Struct) or typeStruct (creates a new struct for the param)
              
    
    Transaction:
      description: A single execution of a Contract Method. This is a record of your execution history. Transactions are updated as they move forward on the blockchain.
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/TransactionId"
            contractMethodId:
              $ref: "#/components/schemas/ContractMethodId"
            apiCredentialId:
              type: string
              format: uuid
              description: ID of the API Credential used to execute the Contract Method and create this Transaction. Note, this is not the API Key itself. This will be null if a user initiated the execution and not an API Credential
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
              nullable: true
            apiKey:
              type: string
              description: The actual API key used
              nullable: true
            userId:
              type: string
              format: uuid
              description: The User ID that executed the Contract Method and created this Transaction. This will be null if an API key was used instead of a user token.
              nullable: true
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            status:
              $ref: "#/components/schemas/ETransactionStatus"
            transactionHash:
              type: string
              nullable: true
              description: The hash of the Transaction. Only calculated once the status is Submitted. This is an immutable value and can be looked up on the appropriate block scanner.
            name:
              type: string
              description: the name of the associated Contract Method. Included as a convienience.
            functionName:
              type: string
              description: The functionName of the associated Contract Method. Included as a convienience.
            chainId:
              $ref: "#/components/schemas/EChain"
            memo:
              type: string
              nullable: true
              description: Optional text supplied when the transaction is executed. This can be a note to the user about why the execution was done, or formatted information such as JSON that can be used by the user's system.
            completed:
              type: number
              description: This is the timestamp for when 1Shot determined the Transaction to have settled. It will be null until the Transaction is in it's final state, hopefully "Completed". 
              nullable: true
              format: unix-timestamp
              example: 1659485172
          required:
            - id
            - contractMethodId
            - apiCredentialId
            - apiKey
            - userId
            - status
            - transactionHash
            - name
            - functionName
            - chainId
            - memo
            - completed
        - $ref: "#/components/schemas/EntityBookKeeping"
        
    JSONValue:
      description: A JSON-compatible value. This could be a single primitive value such as a string, or it could be an Array or another Object.
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: array
          items:
            $ref: '#/components/schemas/JSONValue'
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/JSONValue'

    ContractMethodEstimate:
      description: A summary of values required to estimate the cost of executing a Contract Method
      properties:
        chainId:
          $ref: "#/components/schemas/EChain"
        contractAddress:
          $ref: "#/components/schemas/ContractAddress"
        functionName:
          type: string
        gasAmount:
          type: string
          format: big-number-string
          description: The amount of gas units it will use. This is a stringified bigint.
        maxFeePerGas:
          type: string
          format: big-number-string
          nullable: true
        maxPriorityFeePerGas:
          type: string
          format: big-number-string
          nullable: true
        gasPrice:
          type: string
          format: big-number-string
          nullable: true
      required:
        - chainId
        - contractAddress
        - functionName
        - gasAmount
        - maxFeePerGas
        - maxPriorityFeePerGas
        - gasPrice

    AbiParameter:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          example: uint256
        internalType:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/AbiParameter'
        indexed:
          type: boolean
      required:
        - type

    AbiFunction:
      type: object
      properties:
        type:
          type: string
          enum: [function]
        name:
          type: string
        stateMutability:
          type: string
          enum: [pure, view, nonpayable, payable]
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AbiParameter'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/AbiParameter'
      required:
        - type
        - name
        - inputs
        - outputs
        - stateMutability

    AbiEvent:
      type: object
      properties:
        type:
          type: string
          enum: [event]
        name:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AbiParameter'
        anonymous:
          type: boolean
      required:
        - type
        - name
        - inputs

    AbiConstructor:
      type: object
      properties:
        type:
          type: string
          enum: [constructor]
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AbiParameter'
        stateMutability:
          type: string
          enum: [nonpayable, payable]
      required:
        - type
        - inputs
        - stateMutability

    AbiFallback:
      type: object
      properties:
        type:
          type: string
          enum: [fallback]
        stateMutability:
          type: string
          enum: [nonpayable, payable]
      required:
        - type
        - stateMutability

    EthereumAbi:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/AbiFunction'
          - $ref: '#/components/schemas/AbiConstructor'
          - $ref: '#/components/schemas/AbiEvent'
          - $ref: '#/components/schemas/AbiFallback'
          
    ContractMethodId:
      type: string
      format: uuid
      description: Internal ID of the Contract Method object. Contract Methods are sometimes referred to as Endpoints. A Contract Method is a single method on a smart contract.
      example: 4b4bab2d-673d-4b91-8e09-f1402962cd3e

    TransactionId:
      type: string
      format: uuid
      description: Internal ID of the Transaction object. Each time a Contract Method is executed, a Transaction is created to track the status of it.
      example: 4b4bab2d-673d-4b91-8e09-f1402962cd3e
          
    WalletId:
      type: string
      format: uuid
      description: The internal ID of a Wallet object. A wallet is a custodial hot wallet in 1Shot. This is not the address associated with the Wallet but the internal ID.
      example: 8a6e0804-2bd0-4672-b79d-d97027f90720

    BusinessId:
      type: string
      format: uuid
      description: The internal ID of the Business. Every object in the API is ultimately scoped to a single Business. You can get this from the Business Details page on app.1shotapi.com.
      example: 8a6e0804-2bd0-4672-b79d-d97027f90720
    
    Prompt:
      description: A description of a contract, designed to be used for contract discovery by AI agents.
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: internal ID of the prompt
              example: f4e3d951-85ad-42fa-8e21-75545145c7bc
              readOnly: true
            userId:
              type: string
              format: uuid
              description: ID of the user that created 
              example: f4e3d951-85ad-42fa-8e21-75545145c7bc
              readOnly: true
            chainId:
              $ref: "#/components/schemas/EChain"
            contractAddress:
              $ref: "#/components/schemas/ContractAddress"
            name:
              type: string
              description: The name of the contract. This is human provided and has no technical significance
            description:
              type: string
              description: The human provided description of what the contract is and does. This is a top-level decription and should say what the overall purpose of the contract is, as well as explicit examples of how to use the contract, such as which methods to use and in what order to use them. A Prompt that is designed for a more specific use case can omit the overall description and just thouroghly describe the intended use case and method flow.
            tags:
              type: array
              description: An array of tag names provided to the contract
              items:
                type: string
          required:
            - id
            - userId
            - chainId
            - contractAddress
            - name
            - description
            - tags
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
  
    FullPrompt:
      description: A description of a contract
      allOf:
        - type: object
          properties:
            functions: 
              type: array
              description: An array of Contract Function Descriptions, describing each function on the contract.
              items:
                $ref: "#/components/schemas/ContractFunctionPrompt"
          required:
            - functions
        - $ref: "#/components/schemas/Prompt"

    ContractFunctionPrompt:
      description: The description of a single function on a contract
      type: object
      properties:
        name:
          type: string
          description: The name of the function. This has to exactly match the name of the function in the Solidity contract, including the case and whitespace
        description:
          type: string
          description: A human provided description of the function, what it does, and a basic overview of its parameters.
        tags:
          type: array
          description: An array of tag names provided to the contract function
          items:
            type: string
        inputs:
          type: array
          description: An array of input parameters for the function. All inputs are required to be named.
          items:
            $ref: "#/components/schemas/ContractFunctionParamPrompt"
        outputs:
          type: array
          description: An array of output parameters for the function. Outputs are not required to be named in Solidity, but do require a name in 1Shot.
          items:
            $ref: "#/components/schemas/ContractFunctionParamPrompt"
      required:
        - name
        - description
        - tags
        - inputs
        - outputs

    ContractFunctionParamPrompt:
      description: A description of a function parameter. This may be an input or an output parameter.
      type: object
      properties:
        index:
          type: integer
          description: The index of the parameter. Starts at 0.
        name:
          type: string
          description: The name of the parameter, as defined in the Solidity contract. Input parameters are required to have names; this may be blank for output parameters.
        description:
          type: string
          description: A description of the parameter and its purpose. These descriptions are provided by either humans or AI and are intended for AI agent consumption.
        tags:
          type: array
          description: An array of tag names associated with the function parameter.
          items:
            type: string 
      required:
        - index
        - name
        - description
        - tags
    
    ContractMethodTestResult:
      description: The result of running /test on a contract method.
      type: object
      properties:
        success:
          type: boolean
          description: Whether or not the contract method would run successfully. 
        result:
          type: object
          description: The result returned by the contract method, if it was successful. When running a test, no changes are made on the blockchain, so these results are hypothetical.
          nullable: true
        error:
          type: object
          description: The error that occurred, if the contract method was not successful.
          nullable: true
      required:
        - success
        - result
        - error

    ERC7702Authorization:
      description: A single authorization for an ERC-7702 transaction. It represents a single potential delegation from an EOA to a contract. The EOA must sign a message with the contract address, the chain ID, and a nonce. Authorizations are sticky, once a Contract Method has been executed with an authorization, future Contract Methods may be executed for the EOA using the authorized contract without a new authorization being submitted.
      type: object
      properties:
        address:
          $ref: "#/components/schemas/ContractAddress"
        nonce:
          type: string
          format: big-number-string
          description: The delegation nonce. This starts at 0 and must be positive. The EOA must keep track of this nonce itself.
        chainId:
          $ref: "#/components/schemas/EChain"
        signature:
          type: string
          format: hex-string
          description: The signature of the authorization, from the EOA that is delegating the authorization to the contract at address.
          example: "0x1234567890abcdef"
      required:
        - address
        - nonce
        - chainId
        - signature